{"name":"Kandinsky","tagline":"Visual rendering of sound in real-time 3D","body":"kandinsky\r\n=========\r\n\r\nVisual rendering of sound in real-time 3D\r\n\r\n## Components\r\n\r\nThe main components of kandinsky are:\r\n\r\n* The audio processing server, running on the hardware that records the audio input. The server application performs signal transformation and feature extraction, such as beat detection. Results from feature extraction are streamed to clients. A setup of kandinsky may have several servers running that specialize in different tasks. \r\n* Clients that interpret data received from a kandinsky server, usually as a 3D rendering. \r\n\r\nThe processing on both server- and client side consists of daisy-chained plugins that are configured in the kandisky main application.\r\n\r\n## Communication protocols\r\n\r\nIf **GUI events** are provided by a server instance, clients can subscribe to its GUI socket. \r\nGUI Messages are broadcasted as JSON objects. \r\n\r\nReal-time **data from feature extraction** is sent on one-way channels using simple binary packages broadcasted via UDP.\r\n\r\n## Dependencies\r\n\r\nThe kandinsky project is built depending on the following libraries: \r\n\r\n### Server application \r\n* [EMBB](http://github.com/siemens/embb), optionally using [my modified fork of EMBB](http://github.com/fuchsto/embb)\r\n* [FFTW-EMBB](FFTW, parallelized using EMBB)\r\n\r\n### Client application\r\n* GTK+ for clients with GUI dialogs\r\n* OpenGL and the [official](http://github.com/siemens/embb) or [modified version](http://github.com/fuchsto/embb) of EMBB for 3D rendering clients\r\n\r\n## Build instructions\r\n\r\nClone this repository and use CMake to generate a native build environment. \r\n\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}